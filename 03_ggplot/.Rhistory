install.packages("tidyverse")
library(modelr)
install.packages("moments")
install.packages(c("hexbin", "splines2"))
install.packages("tidyverse")
install.packages("readxl")
install.packages("purrr")
a <-- b
a <-- 'b'
?factorial
TRUE & FALSE
install.packages("purrr")
?ifelse
install.packages("tidyverse")
install.packages(c("tidymodels", "stringr", "forcats", "lubridate", "magrittr", "broom", "lmtest", "MASS", "kableExtra", "mosaic", "latex2exp", "pubh", "moonBook", "sjlabelled", "sjPlot", "reshape2", "olsrr", "ggfortify", "mgcv", "modelr", "alr4", "equatiomatic", "survival", "survminer"))
theme_set(theme_sjplot2)
source("~/.active-rstudio-document")
theme_set(theme_sjplot2)
zinc <- c(3,5.8,5.6,4.8,5.1,3.6,5.5,4.7,5.7,4.4,5.4,4.2,5.3)
length(zinc)
hist(zinc)
boxplot(zinc)
# Linea continua, densidad de los datos
plot(density(zinc), col = "blue")
## ggplot2
library(ggplot2)
## ggplot2
library(ggplot2)
?mtcars
qplot(mpg, wt, mtcars, "point")
qplot(x = mpg, y = wt, data = mtcars, geom = "point")
qplot(x = mpg, y = wt, data = mtcars, geom = c("point","smooth"))
qplot(x = mpg, y = wt, data = mtcars, geom = "point", color = am)
library(dplyr)
mtcars <- mtcars %>% transform(cyl= as.factor(cyl))
glimpse(mtcars)
qplot(x = mpg, y = wt, data = mtcars, geom = "point", color = cyl)
qplot(x = mpg, y = wt, data = mtcars, geom = "point", shape = cyl)
qplot(x = mpg, y = wt, data = mtcars, geom = "point", colour = cyl, shape = cyl)
wdata <- data.frame(genero = factor(rep(c("H","M"), each = 200 )),
peso = c(rnorm(200,60),rnorm(200,50)))
View(wdata)
qplot(x=genero, y = peso, data = wdata, geom = "boxplot")
qplot(x=genero, y = peso, data = wdata, geom = "boxplot", fill = genero)
qplot(x=genero, y = peso, data = wdata, geom = "violin", fill = genero)
qplot(x=genero, y = peso, data = wdata, geom = "dotplot",
stackdir = "center", binaxis = "y", dotsize = .9)
qplot(x=genero, y = peso, data = wdata, geom = "dotplot",
stackdir = "center", binaxis = "y", dotsize = .3)
qplot(peso, data = wdata, geom = "histogram", fill = genero)
qplot(peso, data = wdata, geom = "density", color = genero, linetype = genero)
ggplot(data = mtcars, aes(x = wt, y = mpg))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = peso)) +
geom_density()
ggplot(data = mtcars, aes(x = peso)) +
geom_density()
ggplot(data = wdata, aes(x = peso)) +
geom_density()
ggplot(data = wdata, aes(x = peso)) +
stat_density()
mi_pie <- mtcars %>% group_by(cyl) %>%
summarise(n = n())
ggplot(mi_pie, aes(x = "", y = n, fill = cyl)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0)
ggplot(mi_pie, aes(x = "", y = n, fill = cyl)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) + ggtitle("Gráfica de pastel")
a <- ggplot(wdata, aes(x = peso))
a +geom_density()
a + geom_dotplot()
a + geom_histogram()
a + geom_histogram() + theme_dark()
a + stat_ecdf()
a + stat_ecdf() + ggtitle("Distribución acumulada") + xlab("Mi eje x") +
ylab("Mi eje y")
a + geom_histogram() + theme_gray()
theme_set(theme_dark)
a <- ggplot(wdata, aes(x = peso))
a + geom_density()
a + geom_dotplot()
a + geom_histogram() + theme_gray()
a + stat_ecdf() + ggtitle("Distribución acumulada") + xlab("Mi eje x") +
ylab("Mi eje y")
a + stat_ecdf() + ggtitle("Distribución acumulada") + xlab("Mi eje x") +
ylab("Mi eje y")
theme_set(theme_dark())
a + stat_ecdf() + ggtitle("Distribución acumulada") + xlab("Mi eje x") +
ylab("Mi eje y")
ggplot(wdata, aes(sample = peso))+stat_qq()
ggplot(wdata %>% filter(genero == "H"), aes(sample = peso)) + stat_qq()
install.packages(c("gganimate", "av", "gifski", "gapminder"))
mtcars
View(mtcars)
library(ggplot2)
library(dplyr)
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg)) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg), color = cyl) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg), color = cyl) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg), color = cyl) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = cyl) ) +
geom_point(size = 5, shape = 20)
mtcars <- mtcars %>% group_by(cyl)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = cyl) ) +
geom_point(size = 5, shape = 20)
mtcars <- mtcars %>% group_by(cyl)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = cyl) ) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = as.factor(cyl)) ) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = as.factor(cyl)) ) +
geom_point(size = 5, shape = 20) + geom_line()
ggplot(data = mtcars, aes(x = hp, y = mpg, color = as.factor(cyl)) ) +
geom_point(size = 5, shape = 20) + geom_abline()
graf_pastel <- mtcars %>% group_by(cyl) %>%
summarise(n = n())
ggplot(graf_pastel, aes(x = "", y = n, fill = cyl)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) + ggtitle("Gráfica de pastel")
ggplot(graf_pastel, aes(x = "", y = n, fill = as.factor(cyl))) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) + ggtitle("Gráfica de pastel")
ggplot(data = mtcars, aes(x = hp, y = mpg, color = as.factor(cyl)) ) +
geom_point(size = 5, shape = 20)
ggplot(data = mtcars, aes(x = hp, y = mpg, color = as.factor(cyl)) ) +
geom_point(size = 5, shape = 20) + smooth()
ggplot(graf_pastel, aes(x = "", y = n, fill = as.factor(cyl))) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) + ggtitle("Porcion por cilindros") +
ylab("Mi eje y")
ggplot(graf_pastel, aes(x = "", y = n, fill = as.factor(cyl))) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) + ggtitle("Porción por cilindros") +
ylab("Carros por cilindros")
glimp(airquality)
airquality
glimpse(airquality)
air
airquality
View(airquality)
airquality <- airquality %>% group_by(cyl)
airquality <- airquality %>% group_by(Month)
View(airquality)
airquality <- airquality %>% filter( airquality$Month == 5)
airquality <- airquality %>% filter(airquality$Month = 5)
ity)
glimpse(airquality)
airquality <- airquality %>% filter(airquality$Month == 5)
airquality <- airquality[airquality$Month == 5,]
geom_hex()
ggplot(data = airquality, aes(Munth ) +
ggplot(data = airquality, aes(Munth ) +
airquality <- airquality[airquality$Month == 5,]
ggplot(data = airquality, aes(Munth ) +
ggplot(data = airquality, aes(Munth)) +
geom_hex()
ggplot(data = airquality, aes(Munth)) +
geom_histogram()
ggplot(data = airquality, aes(Month)) +
geom_histogram()
airquality
ggplot(data = airquality, aes(Month,Temp)) +
geom_point()
airquality
ggplot(data = airquality, aes(Month,Temp)) +
geom_point()
View(airquality)
ggplot(data = airquality, aes(Month,Temp)) +
geom_point()
ggplot(data = airquality, aes(Month,Temp)) +
geom_point()
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
glimpse(airquality)
airquality
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
airquality
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
libraryggr(ggplot2)
library(dplyr)
glimpse(airquality)
airquality
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
library(ggplot2)
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
airquality <- airquality %>% group_by(Month)
ggplot(data = airquality, aes(x = Month,y = Temp)) +
geom_point()
ggplot(data = na.rm(airquality), aes(x = Month,y = Temp)) +
geom_point()
ggplot(data = na.omit(airquality), aes(x = Month,y = Temp)) +
geom_point()
View(airquality)
airquality <- airquality %>% group_by(Month)
View(airquality)
x <-  c("w", "video", "cross", "extra", "deal", "authority")
library(stringr)
library(tidyverse)
str_length(x)
str_c(x, collapse = ", ")
str_length(x)
x <-  c("why", "video", "cross", "extra", "deal", "authority")
str_length(x)
# Esta función nos permite concatenar los elementos de un vector
# y nos permite elegir un separador.
str_c(x, collapse = " ")
palabra <-  "El mejor curso de programación"
str_sub(string = palabra, start = 7, end = 13)
str_extract(string = x, pattern = "[aeiou]")
str_subset(string = palabra, start = 7, end = 13)
str_subset(string = x, start = 7, end = 13)
str_subset(string = x, pattern = "[aeiou]").
str_subset(string = x, pattern = "[aeiou]")
str_count(string = x, pattern = "[aeiou]")
str_detect(string = x, pattern = "[aeiou]")
mtcars
mtcars %>% rownames_to_column(var = "Model")
mtcars <- mtcars %>% rownames_to_column(var = "Model")
mtcars <- filter(str_detect(string = Model, , pattern = "(erc)")) $>$ View
mtcars <- filter(str_detect(string = Model, pattern = "(erc)")) $>$ View
mtcars <- filter(str_detect(string = Model, pattern = "(erc)")) %>% View
mtcars <- mtcars %>% rownames_to_column(var = "Model")
# Nos devuelve un vector lógico, si en la entrada está
# los carecteres que estamos buscando.
str_detect(string = x, pattern = "[aeiou]")
mtcars <- mtcars %>% rownames_to_column(var = "Model")
mtcars %>% filter(str_detect(string = Model, pattern = "(erc)")) %>% View
mtcars %>% filter(str_detect(string = Model, pattern = "(erc)")) %>% View()
# Nos devuelve un vector lógico, si en la entrada está
# los carecteres que estamos buscando.
str_detect(string = x, pattern = "[aeiou]")
mtcars <- mtcars %>% rownames_to_column(var = "Model")
mtcars
library(stringr)
library(tidyverse)
mtcars
mtcars
library(stringr)
library(tidyverse)
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
# Instalacion de la libreria
# install.packages('tidyverse')
# cargar libreria
library(ggplot2)
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages("IRkernel")
# Cargar librerias
library(tidyverse)
library(readxl)
# seccion de trabajo
setwd("C:/Users/luisj/Dropbox/Ciencia_de_datos/Portafolio/R/03_ggplot")
enoe <- read_xlsx("mu_enoe.xlsx")
# Conocer el tipo de datos.
class(enoe)
# Obsevaciones vs variables
dim(enoe)
#nombres de las  variables
colnames(enoe)
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual))
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual), color = "blue")
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual, color = tipo_empleo))
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual, shape = tipo_empleo))
# Identificamos ahora por medio del ingreso mensual
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual, alpha = ingreso_mensual))
# Identificamos ahora por medio del ingreso mensual
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = edad, alpha = ingreso_mensual))
# ggplot trabaja en capas
ggplot( data = enoe) + # capa 1
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual), color = "blue") + #capa 2
geom_smooth(aes(anios_esc,ingreso_mensual))
# separar por facetas.
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual)) +
facet_wrap(~sex, nrow=1, ncol=2)
# separar por facetas.
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual, color = tipo_empleo)) +
facet_wrap(~sex, nrow=1, ncol=2)
# facet_grid
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual, color = tipo_empleo)) +
facet_grid(tipo_empleo~sex)
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual), color = "blue")
# Comparemos dos datos con dos tipos distintos de gráficos
# Gráfico 1
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual), color = "blue")
# Gráfico 2
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual), color = "blue")
# Tambien podemos separar una gráfica de curvas
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual, linetype = sex))
# Combinar gráificas.
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual, linetype = tipo_empleo))
# Combinar gráificas.
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual, linetype = tipo_empleo)) +
geom_point(mapping = aes(anios_ec,ingreso_mensual, color = tipo_empleo))
# Combinar gráificas.
ggplot( data = enoe) +
geom_smooth(mapping = aes(x = anios_esc, y = ingreso_mensual, linetype = tipo_empleo)) +
geom_point(mapping = aes(anios_esc,ingreso_mensual, color = tipo_empleo))
# Combinar gráificas.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_smooth( mapping = aes(linetype = tipo_empleo)) +
geom_point(mapping = aes(anios_esc,ingreso_mensual, color = tipo_empleo))
# Combinar gráificas.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_smooth( mapping = aes(linetype = tipo_empleo)) +
geom_point(mapping = aes(color = tipo_empleo))
# Variacion de la grafica.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_smooth( mapping = aes(linetype = tipo_empleo)) +
geom_point(mapping = aes(color = tipo_empleo), show.legend = FALSE)
# Variacion de la grafica.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_point(mapping = aes(color = nivel_edu), show.legend = FALSE)
# Variacion de la grafica.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_point(mapping = aes(color = niv_edu), show.legend = FALSE)
# Variacion de la grafica.
ggplot( data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual)) +
geom_smooth(data = filter(enoe, estado == "Jalisco"), se = FALSE) +
geom_point(mapping = aes(color = niv_edu), show.legend = FALSE)
# Grafica de barras por sexo
ggplot( data = enoe) +
geom_bar(mapping = aes(x = sex))
ggplot( data = enoe) +
stat_count(mapping = aes(x = sex))
# Grafica de barras por sexo
ggplot( data = enoe) +
geom_bar(mapping = aes(x = sex, y=..prop.., group = 1))
ggplot(data = enoe) + stat_summary(
mapping = aes(x = sex, y = ingreso_mensual),
fun.min = min,
fun.max = max,
fun = median
)
# Grafica de barras apiladas
ggplot(data = enoe) +
geom_bar(mapping = aes(x = sex, fill = sex))
ggplot(data = enoe) +
geom_bar(mapping = aes(x = sex, fill = niv_edu))
ggplot(data = enoe, mapping = aes(x = sex, fill = niv_edu)) +
geom_bar(position = "fill")
ggplot(data = enoe, mapping = aes(x = sex, fill = niv_edu)) +
geom_bar(position = "dodge")
ggplot(data = enoe, mapping = aes(x = sex, fill = niv_edu)) +
geom_bar(position = "dodge") + labs(title = "Observaciones")
ggplot(data = enoe, mapping = aes(x = sex, fill = niv_edu)) +
geom_bar(position = "dodge") + labs(title = "Sexo y nivel educativo", x = "Sexo", y = "Observaciones")
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual))
# jitter
ggplot( data = enoe) +
geom_point(mapping = aes(x = anios_esc, y = ingreso_mensual), position = "jitter")
# Sistema de coordenadas.
# Diagrama de caja y bigotes.
ggplot(data = enoe, mapping = aes(x = anios_esc, y = ingreso_mensual), position = "jitter") +
geom_boxplot()
# Sistema de coordenadas.
# Diagrama de caja y bigotes.
ggplot(data = enoe, mapping = aes(x = niv_edu, y = ingreso_mensual), position = "jitter") +
geom_boxplot()
# Sistema de coordenadas.
# Diagrama de caja y bigotes.
ggplot(data = enoe, mapping = aes(x = niv_edu, y = ingreso_mensual), position = "jitter") +
geom_boxplot() + coord_flip()
ggplot(data = enoe) + geom_bar(mapping = aes(x = niv_edu, fill = niv_edu)
show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
ggplot(data = enoe) + geom_bar(mapping = aes(x = niv_edu, fill = niv_edu),
show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
barras <- ggplot(data = enoe) + geom_bar(mapping = aes(x = niv_edu, fill = niv_edu),
show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
barras + coord_polar()
# Esta es una gráfia de pastel.
ggplot(data = enoe, mapping = aes(x = factor(1), fill = niv_edu))
# Esta es una gráfia de pastel.
ggplot(data = enoe, mapping = aes(x = factor(1), fill = niv_edu)) +
geom_bar(position = "fill") +
coord_polar(theta = "y") +
labs(x = " ", y = " ")
